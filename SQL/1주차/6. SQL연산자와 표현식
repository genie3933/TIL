- SQL 연산자
    - 기본 연산자
    - 비교 연산자
    - 기타 연산자
- SQL 표현식
    - CASE 표현식
- 의사컬럼

---

## SQL 연산자

### 기본 연산자

- 단항 부호 연산자: +, - (양수, 음수), 우선순위1
- 수식 연산자: *, / (곱하기, 나누기), 우선순위2
- 수식연산자: +, - (더하기, 빼기), 날짜형 데이터 사용 가능, 우선순위3
- 문자열 결합 연산자: ||, 우선순위3

```sql
# 문자열 결합
SELECT first_name||''||last_name AS full_name
FROM EMPLOYEES;
```

### 비교 연산자

- 동등 연산자: =, 값이 같으면 참
- 비동등 연산자: !=, <> 값이 틀리면 참
- 부등호 연산자: >, <, >= ,=<
- BETWEEN...AND: 대상값 BETWEEN 값1 AND 값2 (값1, 값2 포함한 범위)

```sql
# BETWEEN AND 연산자
SELECT *
FROM EMPLOYEES
WHERE SALARY BETWEEN 3000 AND 5000 # 급여가 3000이상 5000이하
ORDER BY SALARY; # 급여 순으로 오름차순
```

→ AND: AND 연산자

→ OR: OR 연산자

→ NOT: NOT연산자

### 기타 연산자

- NULL 연산자: IS NULL, IS NOT NULL

    NULL은 비교 연산자로 비교가 불가능하다(NULL은 공백 혹은 공집합과 다르다. 값이 정의되지 않는 것을 의미하기 때문)

    EX) WHERE COL1 = NULL (X), WHERE COL1 IS NULL (O), WHERE COL1 IS NOT NULL(O)

    오라클에서는 NULL과 공백을 동일시 한다(다른 DBMS에서는 구분)

- LIKE: 문자열 비교

    '%'는 모든 문자를 의미한다

    EX) WHERE LAST_NAME 'DA%'; → DA로 시작하는 모든 LAST_NAME

    WHERE LAST_NAME '%D'; → D로 끝나는 모든 LAST_NAME

    WHERE LAST_NAME '%DA%' → DA가 들어가는 모든 LAST_NAME

- IN: 컬럼 IN(값1, 값2, 값3, ....) ⇒ OR과 동일하게 동작한다
- 그 외 집합 연산자: UNION, UNION ALL, INTERSECT, MINUS, EXISTS, ....

## SQL 표현식

- 1개 이상의 값, 연산자, 컬럼, SQL 함수가 결합된 식

### CASE 표현식

- IF ~ THEN ~ ELSE 로직 구현
- 여러 조건을 체크해 조건별 값을 반환한다
- 단순형, 검색형으로 나뉜다

```sql
# 단순형 CASE 표현식
# expr이 비교표현식1과 같으면 값1, 비교표현식2와 같으면 값2 반환
# 어느것도 같지 않으면 ELSE 다음의 값N 반환
CASE expr WHEN 비교표현식1 THEN 값1
					WHEN 비교표현식2 THEN 값2
					....
					ELSE 값N
END

# 검색형 CASE 표현식
# 조건1 만족하면 값1 반환, 조건2 만족하면 값2 반환
# 어느 조건도 만족하지 않으면 값N 반환
# 단순형에 비해 다양한 조건 검색 가능, 활용범위가 넓다
CASE WHEN 조건1 THEN 값1
		WHEN 조건2 THEN 값2
		....
		ELSE 값N
END
```

- CASE 표현식의 특징

→ **반환하는 값의 데이터 유형이 모두 같아야** 한다

EX) 반환값이 모두 문자열인데 갑자기 숫자가 튀어나올수는 없다!

→ ELSE 생략 가능

→ 비교 데이터 기준 WHEN절 조건이 참이면 이후 조건은 체크하지 않는다

## 의사컬럼

- 테이블에 있는 컬럼처럼 동작하지만 실제 컬럼은 아닌 가상의 컬럼
- ROWNUM 의사컬럼

→ 조회된 로우에 대한 순번을 반환한다 (행의 순서 반환)

EX) 첫 번째 로우는 1 반환, 두 번째는 2, ....

→ 주로 WHERE절에서 쿼리 결과 반환 수를 제어할 때 사용한다

```sql
# 5개의 행만 보고 싶을 때
SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, ROWNUM
FROM EMPLOYEES
WHERE ROWNUM <= 5;

## 질문...
WHERE절에 있는 조건은 SELECT절에 있는 컬럼만 사용할 수 있는 것일까?
그게 아니라면 ROWNUM의 경우는? ROWNUM은 가상컬럼이기 때문에 SELECT절에 굳이 명시해서 WHERE절에 쓰는 것인지?
SELECT절에 ROWNUM을 명시 안해도 WHERE절에서 조건으로 사용 가능한지?
```

→ 이 외에도 계층형 쿼리, 시퀀스, XML 관련 의사컬럼이 있다
