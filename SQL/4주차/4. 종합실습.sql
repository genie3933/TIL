- 로또 데이터 분석
- 교통사고 분석

---

## 로또 데이터 분석 (955회 까지)

-- LOTTO_MASTER 테이블 생성
CREATE TABLE lotto_master (
seq_no NUMBER NOT NULL, -- 로또회차
draw_date DATE, -- 추첨일
num1 NUMBER, -- 당첨번호1
num2 NUMBER, -- 당첨번호2
num3 NUMBER, -- 당첨번호3
num4 NUMBER, -- 당첨번호4
num5 NUMBER, -- 당첨번호5
num6 NUMBER, -- 당첨번호6
bonus NUMBER -- 보너스번호
);
ALTER TABLE lotto_master
ADD CONSTRAINTS lotto_master_pk PRIMARY
KEY (seq_no);

-- LOTTO_DETAIL 테이블 생성
CREATE TABLE lotto_detail (
seq_no NUMBER NOT NULL, -- 로또회차
rank_no NUMBER NOT NULL, -- 등수
win_person_no NUMBER, -- 당첨자수
win_money NUMBER -- 1인당 당첨금액
);
ALTER TABLE lotto_detail
ADD CONSTRAINTS lotto_detail_pk PRIMARY KEY (seq_no, rank_no);


-- 중복번호 조회

-- NUM1 컬럼에 대해 1~916회까지 중복번호는?
SELECT NUM1, COUNT(*)
FROM LOTTO_MASTER
GROUP BY NUM1
ORDER BY 1;

-- NUM1 ~ 6 컬럼에 대해 1~916회까지 중복번호는? (번호 6개 모두 중복되는 경우)
SELECT NUM1, NUM2, NUM3, NUM4, NUM5, NUM6, COUNT(*)
FROM LOTTO_MASTER
GROUP BY NUM1, NUM2, NUM3, NUM4, NUM5, NUM6
HAVING COUNT(*) > 1
ORDER BY 1, 2, 3, 4, 5, 6;

-- 가장 많이 당첨된 번호 조회
-- NUM1 컬럼에 대해 1~916회까지 가장 많이 당첨된 번호는?
SELECT NUM1, COUNT(NUM1) CNT
FROM LOTTO_MASTER
GROUP BY NUM1
ORDER BY 2 DESC;

-- NUM1, NUM2 컬럼 통틀어 가장 많이 당첨된 번호는? 
-- 인라인 뷰를 사용해서 NUM1, NUM2 컬럼의 많이 당첨된 번호를 찾는다 (UNION ALL)
-- 중복 번호의 당첨된 갯수를 합쳐주기 위해 메인쿼리에서 GROUP BY 사용
-- 중복 번호의 당첨된 갯수는 집계 함수를 사용(SUM)해서 처리
SELECT LOTTO_NUM, SUM(CNT) CNT
FROM (SELECT NUM1 LOTTO_NUM, COUNT(*) CNT
    FROM LOTTO_MASTER
    GROUP BY NUM1
    UNION ALL
    SELECT NUM2 LOTTO_NUM, COUNT(*) CNT
    FROM LOTTO_MASTER
    GROUP BY NUM2
    ORDER BY 1)
GROUP BY LOTTO_NUM
ORDER BY 2 DESC;

-- NUM1 ~ NUM6 컬럼 통틀어 가장 많이 당첨된 번호는?
SELECT LOTTO_NUM, SUM(CNT) CNT
FROM (SELECT NUM1 LOTTO_NUM, COUNT(*) CNT
    FROM LOTTO_MASTER
    GROUP BY NUM1
    UNION ALL
    SELECT NUM2 LOTTO_NUM, COUNT(*) CNT
    FROM LOTTO_MASTER
    GROUP BY NUM2
    UNION ALL
    SELECT NUM3 LOTTO_NUM, COUNT(*) CNT
    FROM LOTTO_MASTER
    GROUP BY NUM3
    UNION ALL
    SELECT NUM4 LOTTO_NUM, COUNT(*) CNT
    FROM LOTTO_MASTER
    GROUP BY NUM4
    UNION ALL
    SELECT NUM5 LOTTO_NUM, COUNT(*) CNT
    FROM LOTTO_MASTER
    GROUP BY NUM5
    UNION ALL
    SELECT NUM6 LOTTO_NUM, COUNT(*) CNT
    FROM LOTTO_MASTER
    GROUP BY NUM6)
GROUP BY LOTTO_NUM
ORDER BY 2 DESC;

-- 가장 많은 당첨금이 나온 회차와 번호, 금액 조회하기
-- LOTTO_MASTER, LOTTO_DETAIL 테이블 조인
SELECT A.SEQ_NO, A.DRAW_DATE, B.WIN_PERSON_NO, B.WIN_MONEY,
    A.NUM1, A.NUM2, A.NUM3, A.NUM4, A.NUM5, A.NUM6, A.BONUS
FROM LOTTO_MASTER A,
    LOTTO_DETAIL B
WHERE A.SEQ_NO = B.SEQ_NO
AND B.RANK_NO = 1
ORDER BY B.WIN_MONEY DESC;


## 교통사고 분석

-- TRAFFIC_ACCIDENT 테이블 생성
CREATE TABLE traffic_accident (
year NUMBER NOT NULL, -- 연도
trans_type VARCHAR2(30) NOT NULL, -- 교통수단
total_acct_num NUMBER, -- 사고발생건수
death_person_num NUMBER -- 사망자수
);
ALTER TABLE traffic_accident
ADD CONSTRAINTS traffic_accident_pk PRIMARY KEY (year, trans_type);


-- 연도, 교통수단별 총 사고건수 조회
SELECT YEAR, TRANS_TYPE, SUM(TOTAL_ACCT_NUM) AS 사고건수,
        SUM(DEATH_PERSON_NUM) AS 사망건수
FROM TRAFFIC_ACCIDENT
GROUP BY YEAR, TRANS_TYPE
ORDER BY 1, 2;

-- 위의 결과를 개별년도별이 아닌 '년대' 별로 다시 집계하는 쿼리
SELECT 
    CASE WHEN YEAR BETWEEN 1980 AND 1989 THEN '1980년대'
         WHEN YEAR BETWEEN 1990 AND 1999 THEN '1990년대'
         WHEN YEAR BETWEEN 2000 AND 2009 THEN '2000년대'
         WHEN YEAR BETWEEN 2010 AND 2019 THEN '2010년대'
    END AS YEARS,
    TRANS_TYPE, SUM(TOTAL_ACCT_NUM) AS 사고건수
FROM TRAFFIC_ACCIDENT
GROUP BY 
    CASE WHEN YEAR BETWEEN 1980 AND 1989 THEN '1980년대'
         WHEN YEAR BETWEEN 1990 AND 1999 THEN '1990년대'
         WHEN YEAR BETWEEN 2000 AND 2009 THEN '2000년대'
         WHEN YEAR BETWEEN 2010 AND 2019 THEN '2010년대'
    END, TRANS_TYPE
ORDER BY YEARS, TRANS_TYPE;

-- 연대별 교통사고 추이 분석
-- 교통사고 유형을 로우로, 연대를 컬럼으로 두고 교통사고 건수 조회
SELECT TRANS_TYPE
  ,SUM(CASE WHEN YEAR BETWEEN 1980 AND 1989 THEN TOTAL_ACCT_NUM ELSE 0 END) "1980년대"
  ,SUM(CASE WHEN YEAR BETWEEN 1990 AND 1999 THEN TOTAL_ACCT_NUM ELSE 0 END) "1990년대"
  ,SUM(CASE WHEN YEAR BETWEEN 2000 AND 2009 THEN TOTAL_ACCT_NUM ELSE 0 END) "2000년대"
  ,SUM(CASE WHEN YEAR BETWEEN 2010 AND 2019 THEN TOTAL_ACCT_NUM ELSE 0 END) "2010년대"
FROM TRAFFIC_ACCIDENT
WHERE 1=1
GROUP BY TRANS_TYPE
ORDER BY TRANS_TYPE;

-- 교통수단별 가장 많은 사망자 수가 발생한 연도
-- 교통사고 별 가장 많은 사망자수
SELECT TRANS_TYPE, MAX(DEATH_PERSON_NUM) DEATH_PER
FROM TRAFFIC_ACCIDENT
GROUP BY TRANS_TYPE
ORDER BY 1;

-- 위의 결과와 조인 (서브쿼리)
SELECT A.*
FROM TRAFFIC_ACCIDENT A,
    (SELECT TRANS_TYPE, MAX(DEATH_PERSON_NUM) DEATH_PER
    FROM TRAFFIC_ACCIDENT
    GROUP BY TRANS_TYPE
    ORDER BY 1) B
WHERE A.TRANS_TYPE = B.TRANS_TYPE
AND A.DEATH_PERSON_NUM = B.DEATH_PER;
