seaborn에 내장된 데이터셋인 'mpg' 데이터를 이용한 EDA 학습

- 범주형 변수
    - 범주형 데이터 유일값의 빈도수 구하기
    - 2개 이상 변수의 빈도수
    - groupby를 통한 연산
    - pivot table을 통한 연산
    - 범주형변수에서의 boxplot과 사분위수
    - boxplot 이해하기
    - 산점도를 통한 범주형 데이터의 서브플롯 시각화
    - catplot을 통한 범주형 데이터의 서브플롯 시각화

---

## 범주형 변수

- 범주형 변수는 양적변수 또는 속성변수라고도 한다
- 범주형 변수의 값은 서로 배타적인 범주 또는 그룹이다
- 일반적으로 데이터를 그룹 또는 부분집합으로 나누는데 사용된다
- ex) 성별, 요일, 월 등
- 범주형 변수에 대한 기술통계를 알기 위해서는 include="object" 옵션을 줘야한다

### 범주형 데이터 유일값의 빈도수 구하기

- .nunique() 함수로 유일값의 빈도수를 구할 수 있다
- 시각화는 sns.countplot() 함수로 가능하다

### 2개 이상 변수의 빈도수

- 2개 이상 범주형 변수의 빈도수는 보통 '교차분석' 값이라고 볼 수 있다
- 판다스에서는 pd.crosstab 함수로 2개 이상 변수의 빈도수를 구할 수 있다

```python
# 교차분석(origin, cylinders 교차)
pd.crosstab(df["origin"], df["cylinders"])

# 출력결과
cylinders	3	4	5	6	8
origin					
europe	0	63	3	4	0
japan	4	69	0	6	0
usa	0	72	0	74	103

# 교차분석 값을 비율로 나타내고자 할 때는 normalize = True 옵션을 사용한다.
# normalize = True 옵션은 값을 0~1 사이의 값(비율)으로 바꿔준다.
pd.crosstab(df["origin"], df["cylinders"], normalize = True)

# 출력결과
cylinders	3	4	5	6	8
origin					
europe	0.00000	0.158291	0.007538	0.010050	0.000000
japan	0.01005	0.173367	0.000000	0.015075	0.000000
usa	0.00000	0.180905	0.000000	0.185930	0.258794
```

### groupby를 통한 연산

- groupby를 사용해 범주형 변수 별로 그룹화 하여 값을 계산할 수 있다

```python
# groupby를 통해 origin 별로 그룹화 하고 origin 별 mpg값 의 평균 구하기
df.groupby("origin")["mpg"].mean()

# 출력결과
origin
europe    27.891429
japan     30.450633
usa       20.083534
Name: mpg, dtype: float64

# 2개 변수 그룹화도 가능하다
df.groupby(["cylinders", "origin"])["mpg"].mean()

# 출력결과
cylinders  origin
3          japan     20.550000
4          europe    28.411111
           japan     31.595652
           usa       27.840278
5          europe    27.366667
6          europe    20.100000
           japan     23.883333
           usa       19.663514
8          usa       14.963107
Name: mpg, dtype: float64
```

### pivot table을 통한 연산

- pivot_table을 사용해 앞의 groupby 결과와 같은 값을 출력할 수 있다

```python
pd.pivot_table(data=df, index="origin", values="mpg") # aggfunc의 디폴트 값은 mean이므로, 따로 입력하지 않아도 된다.

# 출력결과
          mpg
origin	
europe	27.891429
japan	30.450633
usa	20.083534

# pivot table에 컬럼값을 지정할 수도 있다
# 인덱스가 cylinders이고, 컬럼이 origin인 mpg의 평균값
pd.pivot_table(data=df, index="cylinders", values="mpg", columns="origin")

# 출력결과
         origin	europe	japan	usa
cylinders			
3        	NaN	20.550000	NaN
4	        28.411111	31.595652	27.840278
5	        27.366667	NaN	NaN
6       	20.100000	23.883333	19.663514
8 	      NaN	NaN	14.963107
```

### 범주형 변수에서의 boxplot과 사분위수

```python
# boxplot으로 origin별 mpg의 기술통계값 구하기
sns.boxplot(data=df, x="origin", y="mpg")
```

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f5b2567b-2d60-4b8a-88e8-e0e867410518/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f5b2567b-2d60-4b8a-88e8-e0e867410518/Untitled.png)

```python
# groupby를 통해 origin 값에 따른 mpg의 기술통계값 구하기
g = df.groupby("origin")["mpg"].describe()
g 

# 출력결과 (origin별 사분위수 확인)
         count	mean	std	min	25%	50%	75%	max
origin								
europe	70.0	27.891429	6.723930	16.2	24.0	26.5	30.65	44.3
japan	79.0	30.450633	6.090048	18.0	25.7	31.6	34.05	46.6
usa	249.0	20.083534	6.402892	9.0	15.0	18.5	24.00	39.0
```

### boxplot 이해하기

- boxplot 각 위치의 의미

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7910b309-ea33-431a-9c66-4ffb2c04bd7d/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7910b309-ea33-431a-9c66-4ffb2c04bd7d/Untitled.png)

→ Q2 : 중앙값

→ IQR (사분위수 범위): Q3 - Q1 

→ Upper fence: Q3 + 1.5 * IQR

→ Lower fence: Q1 - 1.5 * IQR

→ Q1과 Q3 주변으로 1.5 * IQR 범위에 있는 데이터를 울타리 안에 표시하고, 그 바깥에 있는 데이터는 동그라미로 표시(이상 혹은 극단값)한다

→ 즉, 울타리의 최대 최소값을 벗어나면 이상치 혹은 극단값이라고 예상할 수 있는것이다

출처: [https://onlywis.tistory.com/8](https://onlywis.tistory.com/8)

### 산점도를 통한 범주형 데이터의 서브플롯 시각화

```python
# scatterplot으로 범주형 변수 그리기 (x=origin, y=mpg)
sns.scatter(data=df, x="origin", y="mpg")
```

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fd3b6fa9-0ddc-44f3-ba8a-066fd676d712/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fd3b6fa9-0ddc-44f3-ba8a-066fd676d712/Untitled.png)

```python
# stripplot
sns.stripplot(data=df, x="origin", y="mpg")
```

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0ca76d17-c6cc-4cc6-9c0f-a0746ba5a063/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0ca76d17-c6cc-4cc6-9c0f-a0746ba5a063/Untitled.png)

```python
# swarmplot
# stripplot과 비슷하지만 값이 같은 데이터들의 점이 겹치지 않는다는 차이가 있다.
# size 옵션은 디폴트값이 5. size 값을 조금 줄여주면 전체 데이터 분포를 볼 수있다.
sns.swarmplot(data=df, x="origin", y="mpg", size=3)
```

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8ef71483-b6db-4103-9d34-3de39412df83/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8ef71483-b6db-4103-9d34-3de39412df83/Untitled.png)

```python
# catplot
# catplot은 수치형 변수와 하나 이상의 범주형 변수의 관계를 보여준다.
sns.catplot(data=df, x="origin", y="mpg", 
							col="cylinders", col_wrap=3)

# 또한 kind="point" 옵션을 사용하면 평균값을 추정해서 선 그래프를 그려준다.
sns.catplot(data=df, x="origin", y="mpg", 
							col="cylinders", col_wrap=3, kind="point")
```

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/00115b0b-848f-4eff-b159-0298fcb2b5d0/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/00115b0b-848f-4eff-b159-0298fcb2b5d0/Untitled.png)

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1cd87a93-df3d-46a9-bfcb-1645f9a6f173/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/1cd87a93-df3d-46a9-bfcb-1645f9a6f173/Untitled.png)

### catplot을 통한 범주형 데이터의 서브플롯 시각화

- catplot은 하나 이상의 범주형 변수와 수치형 변수의 관계를 보여주는 그래프이다
- catplot의 kind 옵션을 통해 boxplot, violinplot, countplot 등 다양한 그래프를 그려볼 수 있다

```python
# catplot으로 boxplot 그리기
sns.catplot(data=df, x="origin", y="mpg", col="cylinders",
						col_wrap=3, kind="box")

# catplot으로 violinplot 그리기
sns.catplot(data=df, x="origin", y="mpg", col="cylinders",
						col_wrap=3, kind="violin")

# catplot으로 countplot 그리기
sns.catplot(data=df, x="origin", col="cylinders", col_wrap= 3,
						kind="box")
```

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4f9a9bc0-fd12-4b66-bdd6-2a0f294cca04/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4f9a9bc0-fd12-4b66-bdd6-2a0f294cca04/Untitled.png)

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4a8e08df-fd6d-48c4-b94f-63f3f6e91c86/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4a8e08df-fd6d-48c4-b94f-63f3f6e91c86/Untitled.png)

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/893b1a36-3d80-4c96-b224-33ff76405727/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/893b1a36-3d80-4c96-b224-33ff76405727/Untitled.png)
