- 파이썬 자료형
    1. 숫자
    2. 문자열
    3. 리스트
- 파이썬 흐름제어
    1. 조건문 (if문)
    2. 반복문 (for문)

---

## Zen of Python

- 파이썬의 철학
- import를 통해 파이썬의 라이브러리나 패키지 가져올 수 있다

```
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
```

## Boolean

- True나 False는 0과 1로 표현
- 그러나 명시적으로 표현하기 위해 True, False를 사용

```python
# True는 1과 같음을 표현
True == 1

# False는 0과 같음을 표현
False == 0

# ==는 같다를 표시, !=는 같지 않다를 표시
```

## 숫자

- 숫자 1과 문자 "1"은 다름. 숫자 1은 int, 문자 "1"은 str 타입
- type를 통해 데이터의 타입을 알 수 있음

## 변수

- 숫자로 시작 X
- 언더바(_) 제외 특수문자 사용할 수 없음

## 문자열

- 간단 함수

    lower → 소문자 만들어줌

    upper → 대문자 만들어줌

    strip → 공백 제거

    split → 문자열을 나눠줌

    startswith → 특정문자로 시작하는지 여부 알 수 있음

    endswith → 특정문자로 끝나는지 여부 알 수 있음

- 인덱싱과 슬라이싱

    인덱싱은 하나만, 슬라이싱은 여러개를 가져오는 걸로 생각하면 쉽다

ex)

```python
til = 'Today I learned'

# 인덱싱으로 문자를 가져오기
til[0] # 맨 앞글자
til[-1] # 맨 뒷글자

# 슬라이싱으로 문자 가져오기
# [시작인덱스:끝나는인덱스+1]
til[:5]
til[-7:]
```

## 리스트

- [ ] (대괄호)로 묶어주면 리스트, 각 값은 콤마로 구분
- 리스트는 문자열, 정수, 실수, 불 등 모든 자료형을 저장
- 리스트에 원소를 추가하려면 append, 삭제하려면 remove 사용

```python
medicine = ["소화제", "감기약", "비타민", "해열제"]

# 마그네슘 추가
medicine.append("마그네슘")

# 해열제 삭제
medicine.remove("해열제")
```

- 리스트도 인덱싱이 가능
- 문자열을 리스트로 만들 수 있다

```python
address = '서울특별시 강남구 역삼동 강남대로94길 15 S2빌딩 3층'

# 위의 문자열을 리스트로 만들기
address_list = address.split() # split 이용해서 공백으로 문자열 분리 후 변수에 넣어줌
```

- 만들어진 문자열 리스트 역시 인덱싱과 슬라이싱 가능
- " ".join(리스트)를 사용하면 리스트를 공백문자열로 연결 가능

```python
address_list = ["서울특별시", "강남구", "역삼동", "강남대로94길", "15", "S2빌딩", "3층"]
"-".join(address_list)
```

## 딕셔너리

- 딕셔너리는 { } (중괄호)안에 키: 값 형식으로 저장
- 딕셔너리의 키는 문자열뿐만 아니라 정수, 실수, 불도 사용 가능
- 값에는 리스트, 딕셔너리 등을 포함하여 모든 자료형 사용 가능
- 단, 키에는 리스트와 딕셔너리 사용 불가
- 딕셔너리의 값을 가져오고 싶은 경우, 변수[키]
- 딕셔너리의 키와 값을 추가하고 싶은 경우, 변수[키] = 값

## 제어문

- 조건문(if)
    - if식에 조건식 지정하고 콜론을 붙이며 다음 줄에 실행할 코드가 옴
    - 이때 실행할 코드는 반드시 들여쓰기를 해야 한다

    ```python
    # 기본형식
    if 조건식:
    	print('조건에 맞으면 출력할 값')
    elif 조건식2:
    	print('조건식2에 맞으면 출력할 값')
    else:
    	print('조건에 맞지 않을 경우 출력할 값')
    ```

- 반복문(for, while)
    - range를 사용하면 for문의 반복수 지정 가능

    ```python
    for i in range(10):
    	print(i)
    ```

    - 반복문 변수 i를 '루프 인덱스'라고도 부르며 index의 첫 머리글자를 따서 주로 i를 주로 사용
    - 리스트의 원소 역시 반복문을 통해 꺼낼 수 있다
- 조건문과 반복문을 같이 사용하는 경우 많음

```python
# range 사용해 5번 for문 반복, 인덱스 번호가 짝수일 때 소화제, 홀수일 때 해열제를 출력
for i in range(5):
	if i%2 == 0:
		print("소화제", i)
	else:
		print("해열제", i)
```

- enumerate를 사용하면 인덱스 번호와 원소를 같이 가져올 수 있음 (튜플 형식으로)

```python
for s in enumerate(store):
	print(s)
```

## 함수

- 특정 용도의 코드를 한 곳에 모아 놓은 것
- 처음 한 번만 작성해 놓으면 필요할 때 계속 불러 쓸 수 있음

```python
# 기본 형식
def 함수이름():
		코드

# 반환 값
def 함수이름(매개면수):
		return(반환 값)

# 예시 코드1: 월 반환 함수 만들기
date = '2020.11.01'

def parse_month(date):
		month = date.split(".")[1]
		return(month)

parse_month(date)

# 예시 코드2: 전화번호 국번 반환 함수 만들기
phone_num = '02-123-1234'

def parse_num(phone_num):
		num = phone_num.split("-")[0]
		return(num)

parse_num(phone_num)
```

- 함수를 만들기 전에 먼저 호출하면 에러가 뜸. 파이썬 코드는 위에서 아래로 순차적 진행을 하기 때문.
