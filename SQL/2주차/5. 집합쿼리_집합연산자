- 집합 쿼리
- 집합 연산자
    - UNION
    - UNION ALL
    - INTERSECT
    - MINUS
    - 활용 및 기타

---

## 집합 쿼리

- 집합 연산자를 사용한 쿼리 (수학에서의 집합 연산자와 동일)
- 하나의 SELECT 문장이 반환한 결과를 하나의 집합으로 본다
- 한 개 이상 여러개의 SELECT 문이 연결되어 최종적으로 하나의 결과 집합이 만들어진다
- 하나의 집합 쿼리의 형태

    SELECT ...

    FROM ....

    WHERE ...

    집합연산자

    SELECT ....

    FROM ....

    WHERE ....

    집합연산자

    ....

- 주의할 점: 각 SELECT 절의 컬럼 수와 데이터 타입이 동일해야 한다

    최종 반환되는 컬럼명은 맨 첫 SELECT절의 컬럼 이름을 따라야 한다

    ORDER BY절은 맨 마지막 SELECT 문장에서만 붙일 수 있다

## 집합 연산자

- UNION, UNION ALL, INTERSECT, MINUS 4개 연산자가 존재한다
- 집합 연산자를 통해 SELECT 문을 연결하는 것이다

### UNION

- 두 집합의 모든 원소를 가져오는 합집합 개념이다
- 각 결과 집합에서 조회된 중복값은 1번만 조회된다

### UNION ALL

- UNION과 동일하지만 **중복값도 모두 조회**된다는 점이 다르다

### INTERSECT

- 두 집합의 공통 원소를 가져오는 교집합 개념이다

### MINUS

- 하나의 집합에서 다른 하나의 집합을 빼는 차집합 개념이다
- 차집합 연산자에서는 먼저 명시한 SELECT문의 결과 집합이 기준이 되므로 주의해야한다 **(어떤 쿼리를 선두에 놓는지에 따라 결과가 달라진다)**

    EX) B-A와 A-B는 다르다

- UNION과 마찬가지로 중복값이 있을 경우 1번만 조회된다

### 활용 및 기타

- 집합연산자의 활용

    UNION (ALL): 구조가 다른 여러 테이블에서 동일한 형태의 데이터를 추출하는 경우 많이 사용된다

    또한, 컬럼을 로우 형태로 전환해 조회할 경우 쓰인다

```sql
# 컬럼을 로우로 (union all 사용)
select years, gubun, '국어'subject, korean score
from test_score
union all
select years, gubun, '영어'subject, english score
from test_score
union all
select years, gubun, '수학'subject, math socre
from test_score
order by 2 desc;
```

- 그러나 집합연산자를 어떤 상황에서 사용해야하는지에 대한 명확한 규칙은 없다
- 기타

→ 그룹별로 컬럼값을 더하는 것이 아닌 곱한 결과를 조회하는 쿼리 만들기

→ 집계함수에는 sum밖에 없으므로 곱하기를 더하기로 만들어줘야한다

로그의 덧셈공식 이용

```sql
select department_name
, round(exp(sum(ln(num_data))),0) multiply_result # 곱셈을 덧셈으로 만들어준다.
from groupbymultiply
where 1=1
group by department_name
order by 1;
```
