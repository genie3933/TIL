- Pandas
    1. DataFrame?
- 컬럼 관련
    1. 컬럼 추가
    2. 컬럼값 변경
- 데이터 요약, 데이터 가져오기
    1. 데이터 요약
    2. 컬럼명으로 데이터 가져오기
    3. 2개 이상의 컬럼명 가져오기
    4. 행 기준으로 데이터 가져오기
    5. 행, 열 함께 가져오기
    6. Boolean Indexing, 파생변수 만들기
- 정렬
- 파일 저장

---

## Pandas(Python Data Analysis Library)

- R의 dataframe을 참고하여 만든 것
- dataframe을 주로 다루기 위한 라이브러리
- 라이브러리를 불러오기 위한 코드는 아래와 같다.

```python
# 필요한 라이브러리 불러오기
import pandas as pd
import numpy as np

# numpy는 공학용 계산기, pandas는 R, excel과 비슷
```

### DataFrame?

![https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7e911dc6-7a5d-40eb-9c89-9781e95fe934/Untitled.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7e911dc6-7a5d-40eb-9c89-9781e95fe934/Untitled.png)

```python
# 데이터 프레임 생성
df = pd.DataFrame()

# df의 데이터 타입 확인
type(df)
```

## 컬럼 관련

### 컬럼 추가

- df[컬럼명] = [추가 값1, 추가 값2, ....] (데이터 프레임 형태, 행렬, 2차원)

```python
# 약품명 시리즈 타입으로 약품명을 만든다.
# 다음의 리스트를 만들고 약품명이라는 컬럼에 담는다.

df["약품명"]=["소화제", "감기약", "비타민", "digestive", "Omega3", "오메가3", "vitamin", "Vitamin"]
df

# 출력 결과
  약품명
0	소화제
1	감기약
2	비타민
3	digestive
4	Omega3
5	오메가3
6	vitamin
7	Vitamin

# 가격 컬럼 추가
df["가격"] = 3500 
df

# 출력결과
  약품명	가격
0	소화제	3500
1	감기약	3500
2	비타민	3500
3	digestive	3500
4	Omega3	3500
5	오메가3	3500
6	vitamin	3500
7	Vitamin	3500

# 컬럼에 값을 추가할 때 리스트 형태로 나열하지 않는다면 모두 같은 값 출력
```

- df[컬럼명] (Series 형태, 벡터, 1차원)

```python
# 가격 컬럼만 가져와서 보고 싶은 경우
df["가격"] 

# 출력 결과
0    3500
1    3500
2    3500
3    3500
4    3500
5    3500
6    3500
7    3500

# 컬럼을 하나만 가져오면 시리즈 형태로 출력
# 데이터 프레임 형태로 가져오고 싶다면 [대괄호] 추가
df[["가격"]]

# 출력 결과
  가격
0	3500
1	3500
2	3500
3	3500
4	3500
5	3500
6	3500
7	3500

# 리스트 형태로 출력하고 싶을 때는?
df["가격"].tolist()

# 출력 결과
[3500, 3500, 3500, 3500, 3500, 3500, 3500, 3500]
```

### 컬럼값 변경

- df[컬럼명] = [변경하고 싶은 값1, 변경하고 싶은 값2, ....]
- Nan == Not a number의 약자. 결측치를 의미
- np.nan은 데이터 타입을 소수점이 있는 숫자로 바꿔준다

```python
# 가격 변수의 값을 이와 같이 변경
df["가격"] = [3500, 3200, 4000, 3200, 3700, np.nan, 2000, 1000]
df

# 출력 결과
  약품명	가격
0	소화제	3500.0
1	감기약	3200.0
2	비타민	4000.0
3	digestive	3200.0
4	Omega3	3700.0
5	오메가3	NaN
6	vitamin	2000.0
7	Vitamin	1000.0

# np.nan의 데이터 타입은 float
```

- 각각의 변수 타입을 알기 위해서는 df.dtypes를 사용해주면 된다

```python
# df의 변수 타입 알아보기
df.dtypes

# 출력 결과
약품명     object
가격     float64
dtype: object
```

- 실수로 컬럼을 잘못 추가했거나 삭제하고자 할때는 df.drop 사용

```python
# 다른 컬럼 계속 추가
df["지역"] = "서울"
df["종류"] = "일반의약품"
df["종류2"] = "일반의약품"
df["종류3"] = "일반의약품"
df

# 출력 결과
    약품명	가격	지역	종류	        종류2	     종류3
0	소화제	3500.0	서울	일반의약품	일반의약품	일반의약품
1	감기약	3200.0	서울	일반의약품	일반의약품	일반의약품
2	비타민	4000.0	서울	일반의약품	일반의약품	일반의약품
3	digestive	3200.0	서울	일반의약품	일반의약품	일반의약품
4	Omega3	3700.0	서울	일반의약품	일반의약품	일반의약품
5	오메가3	NaN	서울	일반의약품	일반의약품	일반의약품
6	vitamin	2000.0	서울	일반의약품	일반의약품	일반의약품
7	Vitamin	1000.0	서울	일반의약품	일반의약품	일반의약품

# 종류2, 종류3 삭제
# axis 0은 행을 의미, 1은 컬럼을 의미
# 여러개를 삭제할 때는 리스트로 묶어서 삭제해주어야 한다
df.drop(["종류2", "종류3"], axis = 1) 

# 출력 결과
  약품명	가격	지역	종류
0	소화제	3500.0	서울	일반의약품
1	감기약	3200.0	서울	일반의약품
2	비타민	4000.0	서울	일반의약품
3	digestive	3200.0	서울	일반의약품
4	Omega3	3700.0	서울	일반의약품
5	오메가3	NaN	서울	일반의약품
6	vitamin	2000.0	서울	일반의약품
7	Vitamin	1000.0	서울	일반의약품
```

## 데이터 요약, 데이터 가져오기

### 데이터 요약

- 데이터 프레임의 정보, 크기, 타입, 기술통계값을 가져오는 것을 데이터 요약이라고 한다
- 정보: df.info() → 인덱스, 컬럼명, null여부, 데이터 타입등의 정보
- 크기: df.shape → (행, 열)
- 타입: df.dtypes → 각 컬럼의 데이터 타입 알려줌
- 기술통계값: df.describe() → 데이터 프레임의 요약 정보. 수치형 데이터의 기술통계값 가져옴.
- 범주형 데이터의 기술통계값을 보려면 df.describe(include = "object")

```python
# 범주형 데이터 기술통계값
df.describe(include = "object")

# 출력 결과
약품명	지역	종류
count	8	8	8
unique	8	1	1
top	Omega3	서울	일반의약품
freq	1	8	8

# count 빈도수, unique 유일값(중복제외), top 최빈값, freq 최빈값의 빈도
```

  

### 컬럼명으로 데이터 가져오기

- df[컬럼명] 입력하면 시리즈 형태로 데이터를 가져올 수 있음

```python
df["약품명"]

# 출력 결과
0          소화제
1          감기약
2          비타민
3    digestive
4       Omega3
5         오메가3
6      vitamin
7      Vitamin
Name: 약품명, dtype: obje
```

### 2개 이상의 컬럼명 가져오기

- 파이썬에서 2개 이상 데이터를 다룰 때는 보통 리스트를 사용

```python
# 2개의 컬럼명 가져오기 (데이터 프레임 형태)
df[["약품명", "가격"]]

# 출력 결과
  약품명	가격
0	소화제	3500.0
1	감기약	3200.0
2	비타민	4000.0
3	digestive	3200.0
4	Omega3	3700.0
5	오메가3	NaN
6	vitamin	2000.0
7	Vitamin	1000.0
```

### 행 기준으로 데이터 가져오기

- loc(locate)함수를 이용해 인덱스 번호로 행 데이터를 가져올 수 있음

```python
# 첫번째 행 데이터 가져오기
df.loc[0]

# 출력결과
약품명      소화제
가격      3500
지역        서울
종류     일반의약품
Name: 0, dtype: object

# 위에서 3개의 행 데이터 가져오기
df.loc[[0, 1, 2]] # 여러개면 무조건 리스트 형태

# 출력결과
약품명	가격	지역	종류
0	소화제	3500.0	서울	일반의약품
1	감기약	3200.0	서울	일반의약품
2	비타민	4000.0	서울	일반의약품
```

### 행과 열을 함께 가져오기

- 행, 열을 함께 가져올 때도 loc함수 사용.
- df.loc[행, 열]의 형태

```python
df.loc[0, "약품명"] # 0번째 행에 해당하는 약품명

# 출력 결과
'소화제'

# 행이 여러개인것도 가져올 수 있다
df.loc[[0, 1], "약품명"]

# 출력 결과
0    소화제
1    감기약
Name: 약품명, dtype: object

# 행, 열 여러개인 경우
df.loc[[0, 1], ["약품명", "가격"]]

# 출력 결과
  약품명	가격
0	소화제	3500.0
1	감기약	3200.0   # 리스트 형태로 출력 됨

```

### Boolean Indexing, 파생변수 만들기

- Boolean Indexing이란, 조건문을 가지고 True, False로 Indexing을 해보는 것을 말한다
- 데이터 전처리를 하다보면 ==, !=, &, | 등의 조건문 연산자를 활용해 Indexing과 slicing을 해야할 때가 종종 있다
- 파이썬의 정규표현식에서는 |는 or을, &는 and를 의미
- 파이썬에서는 기존 변수와 관련있는 파생변수를 생성할수도 있다
- 데이터 분석에서 많이 쓰이는 파이썬의 str 메소드: str.contains, str.upper, str.lower 등

```python
# 예시 1
# 약품명이 비타 혹은 vita인 약품명을 가져오려면?
# 파이썬은 대소문자를 구분하기 때문에 약품명을 먼저 모두 소문자로 바꿔주기
df["약품명_소문자"] = df["약품명"].str.lower() # 소문자로 바꿔준 후 새 컬럼에 할당(파생변수 생성),
df["약품명_소문자"].str.contains("vita|비타") # 파생변수에서 비타 혹은 vita를 포함하는 데이터 가져오기
# 데이터 프레임 형태로 변경
df[df["약품명_소문자"].str.contains("vita|비타")]

# 출력 결과
  약품명	가격	지역	종류	약품명_소문자
2	비타민	4000.0	서울	일반의약품	비타민
6	vitamin	2000.0	서울	일반의약품	vitamin
7	Vitamin	1000.0	서울	일반의약품	vitamin

```

```python
# 특정 금액 조건의 가격에 해당되는 데이터 프레임 가져오기
# 불리언 인덱싱 이용! (true index 값만 가져오기)

# 예시 2
# 가격이 3500 미만인 값만 가져오기
df[df["가격"] < 3500]

# 출력 결과
약품명	가격	지역	종류	약품명_소문자
1	감기약	3200.0	서울	일반의약품	감기약
3	digestive	3200.0	서울	일반의약품	digestive
6	vitamin	2000.0	서울	일반의약품	vitamin
7	Vitamin	1000.0	서울	일반의약품	vitamin

# 예시 3
# 가격이 3500 이상인 값만 가져오기
df[df["가격"] > 3500]

# 출력 결과
약품명	가격	지역	종류	약품명_소문자
2	비타민	4000.0	서울	일반의약품	비타민
4	Omega3	3700.0	서울	일반의약품	omega3
```

### 정렬

- sort_values 함수를 통해 데이터를 정렬할 수 있다
- sort_values(by = "기준값", ascending = [True | False])
- default값은 오름차순, 내림차순을 하려면 ascending = False 옵션을 줘야함
- 기준값의 순서가 기존 데이터와 동일할 경우 'by =' 생략 가능. 순서 안 맞을 때만 꼭 써주기!

```python
# 여러개를 정렬할 경우 기준값을 리스트 형태로 나열해주면 됨
df.sort_values(by = ["약품명", "가격"])

# 출력 결과
약품명	가격	지역	종류	약품명_소문자
4	Omega3	3700.0	서울	일반의약품	omega3
7	Vitamin	1000.0	서울	일반의약품	vitamin
3	digestive	3200.0	서울	일반의약품	digestive
6	vitamin	2000.0	서울	일반의약품	vitamin
1	감기약	3200.0	서울	일반의약품	감기약
2	비타민	4000.0	서울	일반의약품	비타민
0	소화제	3500.0	서울	일반의약품	소화제
5	오메가3	NaN	서울	일반의약품	오메가3
```

### 파일 저장

- csv 파일로 저장하려면 to_csv 사용
- df.to_csv("파일경로.csv", [index 옵션])
- index 옵션을 False로 지정하면 인덱스를 저장하지 않음
- 슬래쉬(/)를 이용해 경로 저장도 가능
- 저장된 csv 파일을 다시 읽어오려면 pd.read_csv("파일경로.csv")
